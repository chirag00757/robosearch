{"version":3,"sources":["constants.js","actions.js","api/api.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorkerRegistration.js","reducers.js","index.js"],"names":["CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","style","margin","width","height","backgroundColor","alt","srcset","src","CardList","robots","display","flexDirection","flexWrap","map","user","i","key","SearchBox","searchfield","searchChange","placeholder","onChange","Scroll","props","overflow","border","children","ErrorBoundary","state","hasError","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","ErrorBoundry","connect","searchRobots","event","text","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"kQAAaA,EAAqB,qBAErBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBCOxBC,EAAgB,kBAAM,SAACC,GCXb,IAACC,EDYtBD,EAAS,CAAEE,KAAMN,KCZKK,EDad,6CCZRE,MAAMF,GAAMG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WDanCF,MAAK,SAAAG,GAAI,OAAIP,EAAS,CAAEE,KAAML,EAAwBW,QAASD,OAC/DE,OAAM,SAAAC,GAAK,OAAIV,EAAS,CAAEE,KAAMJ,EAAuBU,QAASE,SEWtDC,EAxBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBACEC,UAAU,GACVC,MAAO,CACLC,OAAQ,MACRC,MAAO,QACPC,OAAQ,QACRC,gBAAiB,YAGnB,yBACEC,IAAI,SACJC,OAAM,+BAA0BR,EAA1B,sBACNS,IAAG,+BAA0BT,EAA1B,mBAEL,6BACE,4BAAKF,GACL,2BAAIC,MCAGW,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,yBAAKT,MAAO,CAAEU,QAAS,OAAQC,cAAe,MAAOC,SAAU,SAC5DH,EAAOI,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLjB,GAAIW,EAAOM,GAAGjB,GACdF,KAAMa,EAAOM,GAAGnB,KAChBC,MAAOY,EAAOM,GAAGlB,aCGdoB,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKpB,UAAU,OACb,2BACEA,UAAU,mCACVb,KAAK,SACLkC,YAAY,gBACZC,SAAUF,MCCHG,EARA,SAACC,GACd,OACE,yBAAKvB,MAAO,CAAEwB,SAAU,SAAUC,OAAQ,kBAAmBtB,OAAQ,UAClEoB,EAAMG,WCeEC,E,kDAjBb,WAAaJ,GAAQ,IAAD,8BAClB,cAAMA,IACDK,MAAQ,CAAEC,UAAU,GAFP,E,qDAKpB,SAAmBnC,EAAOoC,GACxBC,KAAKC,SAAS,CAAEH,UAAU,M,oBAG5B,WACE,OAAIE,KAAKH,MAAMC,SACN,qDAEFE,KAAKR,MAAMG,a,GAdMO,aC2BtBC,G,6KACJ,WACEH,KAAKR,MAAMY,oB,oBAGb,WAAU,IAAD,EACoDJ,KAAKR,MAAxDd,EADD,EACCA,OAAQ2B,EADT,EACSA,YAAaC,EADtB,EACsBA,eAAgBC,EADtC,EACsCA,UACvCC,EAAiB9B,EAAO+B,QAAO,SAAAC,GACnC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASP,EAAYM,kBAEvD,OACE,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWoB,aAAckB,IACzB,kBAAC,EAAD,KACIC,EAAY,uCACZ,kBAACM,EAAD,KACE,kBAAC,EAAD,CAAUnC,OAAQ8B,W,GAjBdN,cA2BHY,eA5CS,SAACjB,GACvB,MAAO,CACLQ,YAAaR,EAAMkB,aAAaV,YAChC3B,OAAQmB,EAAM7C,cAAc0B,OAC5B6B,UAAWV,EAAM7C,cAAcuD,cAMR,SAACtD,GAC1B,MAAO,CACLqD,eAAgB,SAACU,GAAD,OAAW/D,GPfAgE,EOewBD,EAAME,OAAOC,MPf3B,CAAEhE,KAAMP,EAAoBa,QAASwD,KAAhD,IAACA,GOgB3Bb,gBAAiB,kBAAMnD,EAASD,SA+BrB8D,CAA6CX,GC5CtDiB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTtE,MAAK,SAAC2E,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrC,QACfgC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,+GAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BtE,OAAM,SAACC,GACN2E,QAAQ3E,MAAM,4CAA6CA,MCzFjE,IAAM+E,EAAqB,CACzBrC,YAAa,IAYTsC,EAAqB,CACzBjE,OAAQ,GACR6B,WAAW,GCPPqC,G,MAASC,0BAETC,EAAeC,YAAgB,CAAE/F,cDQV,WAA0C,IAAzC6C,EAAwC,uDAAlC8C,EAAoBK,EAAc,uDAAP,GAC7D,OAAQA,EAAO7F,MACb,KAAKN,EACH,OAAOoG,OAAOC,OAAO,GAAIrD,EAAO,CAACU,WAAW,IAC9C,KAAKzD,EACH,OAAOmG,OAAOC,OAAO,GAAIrD,EAAO,CAACnB,OAAQsE,EAAOvF,QAAS8C,WAAW,IACtE,KAAKxD,EACH,OAAOkG,OAAOC,OAAO,GAAIrD,EAAO,CAAClC,MAAOqF,EAAOvF,UACjD,QACE,OAAOoC,ICjByCkB,aDN1B,WAA0C,IAAzClB,EAAwC,uDAAlC6C,EAAoBM,EAAc,uDAAP,GAC5D,OAAQA,EAAO7F,MACb,KAAKP,EACH,OAAOqG,OAAOC,OAAO,GAAIrD,EAAO,CAACQ,YAAa2C,EAAOvF,UACvD,QACE,OAAOoC,MCGPsD,EAAQC,YACZN,EACAO,YAAgBC,IAAiBV,IAGnCW,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SFNnB,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8B,IAAIC,cAAwBtC,OAAOC,SAASsC,MACpDC,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOyC,iBAAiB,QAAQ,WAC9B,IAAMpC,EAAK,UAAMiC,cAAN,sBAEPxC,IAgEV,SAAiCO,EAAOC,GAEtCxE,MAAMuE,EAAO,CACXqC,QAAS,CAAE,iBAAkB,YAE5B3G,MAAK,SAACC,GAEL,IAAM2G,EAAc3G,EAAS0G,QAAQE,IAAI,gBAEnB,MAApB5G,EAAS6G,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAMhH,MAAK,SAAC2E,GAClCA,EAAasC,aAAajH,MAAK,WAC7BiE,OAAOC,SAASgD,eAKpB7C,EAAgBC,EAAOC,MAG1BlE,OAAM,WACL4E,QAAQC,IACN,oEAvFAiC,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAMhH,MAAK,WACjCiF,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,OEjB/B6C,K","file":"static/js/main.da7ec9a2.chunk.js","sourcesContent":["export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { apiCall } from './api/api'\r\nimport {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants'\r\n\r\n\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div\r\n      className=\"\"\r\n      style={{\r\n        margin: \"5px\",\r\n        width: \"264px\",\r\n        height: \"380px\",\r\n        backgroundColor: \"#99e6ff\",\r\n      }}\r\n    >\r\n      <img\r\n        alt=\"robots\"\r\n        srcset={`https://robohash.org/${id}?size=200x200 200w`}\r\n        src={`https://robohash.org/${id}?size=200x200`}\r\n      />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\" }}>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  componentDidCatch (error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render () {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nimport './App.css';\r\n\r\n// parameter state comes from index.js provider store state(rootReducers)\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending\r\n  }\r\n}\r\n\r\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\r\n// the function returns an object then uses connect to change the data from redecers.\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchField, onSearchChange, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return (\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          { isPending ? <h1>Loading</h1> :\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          }\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// action done from mapDispatchToProps will channge state from mapStateToProps\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, {searchField: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: true\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport \"tachyons\";\r\n\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\n\r\nimport { requestRobots, searchRobots } from \"./reducers\";\r\n\r\nimport \"./index.css\";\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducers = combineReducers({ requestRobots, searchRobots });\r\n\r\nconst store = createStore(\r\n  rootReducers,\r\n  applyMiddleware(thunkMiddleware, logger)\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}